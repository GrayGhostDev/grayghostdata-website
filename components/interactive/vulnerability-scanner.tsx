"use client";

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Search,
  Shield,
  AlertTriangle,
  Bug,
  FileWarning,
  Server,
  Database,
  Network,
  Lock,
  RefreshCw,
  ChevronDown,
  ChevronUp,
  ExternalLink
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";

interface Vulnerability {
  id: string;
  name: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  category: 'network' | 'application' | 'system' | 'database';
  status: 'open' | 'in_progress' | 'patched';
  discoveredAt: Date;
  affectedComponents: string[];
  cveId?: string;
  remediation: string;
}

interface ScanStats {
  totalVulnerabilities: number;
  criticalCount: number;
  highCount: number;
  mediumCount: number;
  lowCount: number;
  patchedCount: number;
  lastScanTime: Date;
  riskScore: number;
}

const generateMockVulnerabilities = (): Vulnerability[] => {
  const categories = ['network', 'application', 'system', 'database'];
  const severities = ['critical', 'high', 'medium', 'low'];
  const statuses = ['open', 'in_progress', 'patched'];
  const components = ['Web Server', 'Database', 'API Gateway', 'Load Balancer', 'Authentication Service'];

  const vulnerabilityTemplates = [
    {
      name: 'SQL Injection Vulnerability',
      description: 'Potential SQL injection point detected in database queries',
      category: 'database',
      remediation: 'Implement prepared statements and input validation'
    },
    {
      name: 'Outdated SSL Certificate',
      description: 'SSL certificate is using outdated encryption standards',
      category: 'network',
      remediation: 'Update SSL certificates to use current encryption standards'
    },
    {
      name: 'Unpatched System Vulnerability',
      description: 'Critical system patches missing on several servers',
      category: 'system',
      remediation: 'Apply latest security patches and updates'
    },
    {
      name: 'Cross-Site Scripting (XSS)',
      description: 'XSS vulnerability detected in web application',
      category: 'application',
      remediation: 'Implement proper input sanitization and output encoding'
    },
    {
      name: 'Weak Password Policy',
      description: 'Password policy does not meet security requirements',
      category: 'system',
      remediation: 'Enforce stronger password requirements and implement MFA'
    }
  ];

  return Array.from({ length: 12 }, (_, i) => {
    const template = vulnerabilityTemplates[Math.floor(Math.random() * vulnerabilityTemplates.length)];
    return {
      id: `vuln-${i}`,
      name: template.name,
      description: template.description,
      severity: severities[Math.floor(Math.random() * severities.length)] as Vulnerability['severity'],
      category: template.category as Vulnerability['category'],
      status: statuses[Math.floor(Math.random() * statuses.length)] as Vulnerability['status'],
      discoveredAt: new Date(Date.now() - Math.random() * 604800000), // Within last week
      affectedComponents: Array.from(
        { length: Math.floor(Math.random() * 3) + 1 },
        () => components[Math.floor(Math.random() * components.length)]
      ),
      cveId: Math.random() > 0.5 ? `CVE-2023-${Math.floor(Math.random() * 9000) + 1000}` : undefined,
      remediation: template.remediation
    };
  });
};

const calculateScanStats = (vulnerabilities: Vulnerability[]): ScanStats => {
  const criticalCount = vulnerabilities.filter(v => v.severity === 'critical').length;
  const highCount = vulnerabilities.filter(v => v.severity === 'high').length;
  const mediumCount = vulnerabilities.filter(v => v.severity === 'medium').length;
  const lowCount = vulnerabilities.filter(v => v.severity === 'low').length;
  const patchedCount = vulnerabilities.filter(v => v.status === 'patched').length;

  // Calculate risk score (0-100) based on vulnerability severity and status
  const riskScore = Math.min(100, Math.round(
    (criticalCount * 25) +
    (highCount * 15) +
    (mediumCount * 7) +
    (lowCount * 3)
  ));

  return {
    totalVulnerabilities: vulnerabilities.length,
    criticalCount,
    highCount,
    mediumCount,
    lowCount,
    patchedCount,
    lastScanTime: new Date(),
    riskScore
  };
};

export function VulnerabilityScanner() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [stats, setStats] = useState<ScanStats | null>(null);
  const [filter, setFilter] = useState<'all' | 'critical' | 'high' | 'patched'>('all');
  const [category, setCategory] = useState<'all' | Vulnerability['category']>('all');
  const [isScanning, setIsScanning] = useState(false);
  const [expandedVulnerability, setExpandedVulnerability] = useState<string | null>(null);

  const runScan = () => {
    setIsScanning(true);
    setTimeout(() => {
      const newVulnerabilities = generateMockVulnerabilities();
      setVulnerabilities(newVulnerabilities);
      setStats(calculateScanStats(newVulnerabilities));
      setIsScanning(false);
    }, 2000);
  };

  useEffect(() => {
    runScan();
  }, []);

  const getSeverityColor = (severity: Vulnerability['severity']) => {
    switch (severity) {
      case 'critical': return 'text-red-500 border-red-500';
      case 'high': return 'text-orange-500 border-orange-500';
      case 'medium': return 'text-yellow-500 border-yellow-500';
      case 'low': return 'text-green-500 border-green-500';
      default: return 'text-gray-500 border-gray-500';
    }
  };

  const getCategoryIcon = (category: Vulnerability['category']) => {
    switch (category) {
      case 'network': return <Network className="h-4 w-4" />;
      case 'application': return <FileWarning className="h-4 w-4" />;
      case 'system': return <Server className="h-4 w-4" />;
      case 'database': return <Database className="h-4 w-4" />;
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    if (filter !== 'all' && filter !== vuln.severity && !(filter === 'patched' && vuln.status === 'patched')) return false;
    if (category !== 'all' && category !== vuln.category) return false;
    return true;
  });

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Vulnerability Scanner</h2>
          <p className="text-muted-foreground">
            Scan and analyze system vulnerabilities
          </p>
        </div>
        <Button
          onClick={runScan}
          disabled={isScanning}
        >
          <Search className="h-4 w-4 mr-2" />
          {isScanning ? 'Scanning...' : 'Run Scan'}
        </Button>
      </div>

      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Total Vulnerabilities</p>
                  <h3 className="text-2xl font-bold">{stats.totalVulnerabilities}</h3>
                </div>
                <Bug className="h-8 w-8 text-primary" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Critical/High</p>
                  <h3 className="text-2xl font-bold text-red-500">
                    {stats.criticalCount + stats.highCount}
                  </h3>
                </div>
                <AlertTriangle className="h-8 w-8 text-red-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Patched</p>
                  <h3 className="text-2xl font-bold text-green-500">{stats.patchedCount}</h3>
                </div>
                <Shield className="h-8 w-8 text-green-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Risk Score</p>
                  <h3 className="text-2xl font-bold">{stats.riskScore}%</h3>
                </div>
                <Lock className={`h-8 w-8 ${stats.riskScore > 50 ? 'text-red-500' : 'text-green-500'}`} />
              </div>
              <Progress value={stats.riskScore} className="mt-3" />
            </CardContent>
          </Card>
        </div>
      )}

      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Detected Vulnerabilities</CardTitle>
            <div className="flex space-x-2">
              <Select value={category} onValueChange={(value: any) => setCategory(value)}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Filter by category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Categories</SelectItem>
                  <SelectItem value="network">Network</SelectItem>
                  <SelectItem value="application">Application</SelectItem>
                  <SelectItem value="system">System</SelectItem>
                  <SelectItem value="database">Database</SelectItem>
                </SelectContent>
              </Select>
              <Select value={filter} onValueChange={(value: any) => setFilter(value)}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Filter by severity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Severities</SelectItem>
                  <SelectItem value="critical">Critical</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                  <SelectItem value="patched">Patched</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <AnimatePresence>
              {filteredVulnerabilities.map((vuln) => (
                <Collapsible
                  key={vuln.id}
                  open={expandedVulnerability === vuln.id}
                  onOpenChange={() => setExpandedVulnerability(
                    expandedVulnerability === vuln.id ? null : vuln.id
                  )}
                >
                  <CollapsibleTrigger asChild>
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      className="flex items-center justify-between p-4 rounded-lg border cursor-pointer hover:bg-accent"
                    >
                      <div className="flex items-center space-x-4">
                        {getCategoryIcon(vuln.category)}
                        <div>
                          <p className="font-medium">{vuln.name}</p>
                          <div className="flex items-center space-x-2 mt-1">
                            <Badge variant="outline">{vuln.category}</Badge>
                            {vuln.cveId && (
                              <Badge variant="secondary">
                                <span className="flex items-center space-x-1">
                                  <span>{vuln.cveId}</span>
                                  <ExternalLink className="h-3 w-3" />
                                </span>
                              </Badge>
                            )}
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-4">
                        <Badge className={getSeverityColor(vuln.severity)}>
                          {vuln.severity}
                        </Badge>
                        {expandedVulnerability === vuln.id ? (
                          <ChevronUp className="h-4 w-4" />
                        ) : (
                          <ChevronDown className="h-4 w-4" />
                        )}
                      </div>
                    </motion.div>
                  </CollapsibleTrigger>
                  <CollapsibleContent>
                    <div className="p-4 space-y-4">
                      <div>
                        <h4 className="font-medium mb-2">Description</h4>
                        <p className="text-muted-foreground">{vuln.description}</p>
                      </div>
                      <div>
                        <h4 className="font-medium mb-2">Affected Components</h4>
                        <div className="flex flex-wrap gap-2">
                          {vuln.affectedComponents.map((component, i) => (
                            <Badge key={i} variant="outline">{component}</Badge>
                          ))}
                        </div>
                      </div>
                      <div>
                        <h4 className="font-medium mb-2">Recommended Remediation</h4>
                        <p className="text-muted-foreground">{vuln.remediation}</p>
                      </div>
                      <div className="flex justify-between items-center text-sm text-muted-foreground">
                        <span>Discovered: {vuln.discoveredAt.toLocaleDateString()}</span>
                        <Badge variant="outline">{vuln.status.replace('_', ' ')}</Badge>
                      </div>
                    </div>
                  </CollapsibleContent>
                </Collapsible>
              ))}
            </AnimatePresence>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
